# Generated by Django 3.1.4 on 2021-08-13 06:50

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('stonegrading', '0004_delete_giagradingadjustmixin'),
        ('customers', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GiaVerification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('receipt_number', models.CharField(blank=True, max_length=10)),
                ('invoice_number', models.CharField(blank=True, max_length=10)),
                ('started', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='GoldwayVerification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchase_order', models.CharField(blank=True, max_length=10)),
                ('invoice_number', models.CharField(blank=True, max_length=10)),
                ('started', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Parcel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_parcel_code', models.CharField(max_length=15)),
                ('total_carats', models.DecimalField(decimal_places=3, max_digits=5)),
                ('total_pieces', models.IntegerField()),
                ('reference_price_per_carat', models.PositiveIntegerField()),
                ('gradia_parcel_code', models.CharField(max_length=15)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Split',
            fields=[
                ('original_parcel', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, primary_key=True, serialize=False, to='grading.parcel')),
                ('split_date', models.DateTimeField(auto_now_add=True)),
                ('split_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Receipt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=15)),
                ('intake_date', models.DateTimeField(auto_now_add=True)),
                ('release_date', models.DateTimeField(blank=True, null=True)),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='customers.entity')),
                ('intake_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='signed_off_on_stone_intake', to=settings.AUTH_USER_MODEL)),
                ('release_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='signed_off_on_stone_release', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'customer receipt',
            },
        ),
        migrations.AddField(
            model_name='parcel',
            name='receipt',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='grading.receipt'),
        ),
        migrations.CreateModel(
            name='Stone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('basic_diamond_description', models.CharField(blank=True, choices=[('NATURAL', 'Natural'), ('UNNATURAL', 'Unnatural')], max_length=15, null=True)),
                ('basic_carat', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True)),
                ('basic_color_1', models.CharField(blank=True, choices=[('D', 'D'), ('E', 'E'), ('F', 'F'), ('G', 'G'), ('H', 'H'), ('I', 'I'), ('J', 'J')], max_length=1, null=True)),
                ('basic_color_2', models.CharField(blank=True, choices=[('D', 'D'), ('E', 'E'), ('F', 'F'), ('G', 'G'), ('H', 'H'), ('I', 'I'), ('J', 'J')], max_length=1, null=True)),
                ('basic_color_3', models.CharField(blank=True, choices=[('D', 'D'), ('E', 'E'), ('F', 'F'), ('G', 'G'), ('H', 'H'), ('I', 'I'), ('J', 'J')], max_length=1, null=True)),
                ('basic_color_final', models.CharField(blank=True, choices=[('D', 'D'), ('E', 'E'), ('F', 'F'), ('G', 'G'), ('H', 'H'), ('I', 'I'), ('J', 'J')], max_length=1, null=True)),
                ('basic_clarity_1', models.CharField(blank=True, choices=[('IF+', 'IF+'), ('IF', 'IF'), ('IF-', 'IF-'), ('VVS1+', 'VVS1+'), ('VVS1', 'VVS1'), ('VVS1-', 'VVS1-'), ('VVS2+', 'VVS2+'), ('VVS2', 'VVS2'), ('VVS2-', 'VVS2-'), ('VS1+', 'VS1+'), ('VS1', 'VS1'), ('VS1-', 'VS1-'), ('VS2+', 'VS2+'), ('VS2', 'VS2'), ('VS2-', 'VS2-'), ('SI1+', 'SI1+'), ('SI1', 'SI1'), ('SI1-', 'SI1-'), ('SI2+', 'SI2+'), ('SI2', 'SI2'), ('SI2-', 'SI2-'), ('I1+', 'I1+'), ('I1', 'I1'), ('I1-', 'I1-')], max_length=5, null=True)),
                ('basic_clarity_2', models.CharField(blank=True, choices=[('IF+', 'IF+'), ('IF', 'IF'), ('IF-', 'IF-'), ('VVS1+', 'VVS1+'), ('VVS1', 'VVS1'), ('VVS1-', 'VVS1-'), ('VVS2+', 'VVS2+'), ('VVS2', 'VVS2'), ('VVS2-', 'VVS2-'), ('VS1+', 'VS1+'), ('VS1', 'VS1'), ('VS1-', 'VS1-'), ('VS2+', 'VS2+'), ('VS2', 'VS2'), ('VS2-', 'VS2-'), ('SI1+', 'SI1+'), ('SI1', 'SI1'), ('SI1-', 'SI1-'), ('SI2+', 'SI2+'), ('SI2', 'SI2'), ('SI2-', 'SI2-'), ('I1+', 'I1+'), ('I1', 'I1'), ('I1-', 'I1-')], max_length=5, null=True)),
                ('basic_clarity_3', models.CharField(blank=True, choices=[('IF+', 'IF+'), ('IF', 'IF'), ('IF-', 'IF-'), ('VVS1+', 'VVS1+'), ('VVS1', 'VVS1'), ('VVS1-', 'VVS1-'), ('VVS2+', 'VVS2+'), ('VVS2', 'VVS2'), ('VVS2-', 'VVS2-'), ('VS1+', 'VS1+'), ('VS1', 'VS1'), ('VS1-', 'VS1-'), ('VS2+', 'VS2+'), ('VS2', 'VS2'), ('VS2-', 'VS2-'), ('SI1+', 'SI1+'), ('SI1', 'SI1'), ('SI1-', 'SI1-'), ('SI2+', 'SI2+'), ('SI2', 'SI2'), ('SI2-', 'SI2-'), ('I1+', 'I1+'), ('I1', 'I1'), ('I1-', 'I1-')], max_length=5, null=True)),
                ('basic_clarity_final', models.CharField(blank=True, choices=[('IF+', 'IF+'), ('IF', 'IF'), ('IF-', 'IF-'), ('VVS1+', 'VVS1+'), ('VVS1', 'VVS1'), ('VVS1-', 'VVS1-'), ('VVS2+', 'VVS2+'), ('VVS2', 'VVS2'), ('VVS2-', 'VVS2-'), ('VS1+', 'VS1+'), ('VS1', 'VS1'), ('VS1-', 'VS1-'), ('VS2+', 'VS2+'), ('VS2', 'VS2'), ('VS2-', 'VS2-'), ('SI1+', 'SI1+'), ('SI1', 'SI1'), ('SI1-', 'SI1-'), ('SI2+', 'SI2+'), ('SI2', 'SI2'), ('SI2-', 'SI2-'), ('I1+', 'I1+'), ('I1', 'I1'), ('I1-', 'I1-')], max_length=5, null=True)),
                ('basic_fluorescence_1', models.CharField(blank=True, choices=[('VS', 'Very Strong'), ('S', 'Strong'), ('M', 'Medium'), ('F', 'Faint'), ('N', 'None')], max_length=4, null=True)),
                ('basic_fluorescence_2', models.CharField(blank=True, choices=[('VS', 'Very Strong'), ('S', 'Strong'), ('M', 'Medium'), ('F', 'Faint'), ('N', 'None')], max_length=4, null=True)),
                ('basic_fluorescence_3', models.CharField(blank=True, choices=[('VS', 'Very Strong'), ('S', 'Strong'), ('M', 'Medium'), ('F', 'Faint'), ('N', 'None')], max_length=4, null=True)),
                ('basic_fluorescence_final', models.CharField(blank=True, choices=[('VS', 'Very Strong'), ('S', 'Strong'), ('M', 'Medium'), ('F', 'Faint'), ('N', 'None')], max_length=4, null=True)),
                ('basic_culet_1', models.CharField(blank=True, choices=[('N', 'None'), ('VS', 'Very Small'), ('S', 'Small'), ('M', 'Medium'), ('SL', 'Slightly Large'), ('L', 'Large'), ('VL', 'Very Large'), ('XL', 'Extremely Large')], max_length=2, null=True)),
                ('basic_culet_2', models.CharField(blank=True, choices=[('N', 'None'), ('VS', 'Very Small'), ('S', 'Small'), ('M', 'Medium'), ('SL', 'Slightly Large'), ('L', 'Large'), ('VL', 'Very Large'), ('XL', 'Extremely Large')], max_length=2, null=True)),
                ('basic_culet_3', models.CharField(blank=True, choices=[('N', 'None'), ('VS', 'Very Small'), ('S', 'Small'), ('M', 'Medium'), ('SL', 'Slightly Large'), ('L', 'Large'), ('VL', 'Very Large'), ('XL', 'Extremely Large')], max_length=2, null=True)),
                ('basic_culet_final', models.CharField(blank=True, choices=[('N', 'None'), ('VS', 'Very Small'), ('S', 'Small'), ('M', 'Medium'), ('SL', 'Slightly Large'), ('L', 'Large'), ('VL', 'Very Large'), ('XL', 'Extremely Large')], max_length=2, null=True)),
                ('basic_culet_characteristic_1', models.CharField(blank=True, choices=[('N', 'None'), ('SAB', 'Slightly Abraded'), ('CH', 'Chipped')], max_length=5, null=True)),
                ('basic_culet_characteristic_2', models.CharField(blank=True, choices=[('N', 'None'), ('SAB', 'Slightly Abraded'), ('CH', 'Chipped')], max_length=5, null=True)),
                ('basic_culet_characteristic_3', models.CharField(blank=True, choices=[('N', 'None'), ('SAB', 'Slightly Abraded'), ('CH', 'Chipped')], max_length=5, null=True)),
                ('basic_culet_characteristic_final', models.CharField(blank=True, choices=[('N', 'None'), ('SAB', 'Slightly Abraded'), ('CH', 'Chipped')], max_length=5, null=True)),
                ('basic_girdle_characteristic_1', models.CharField(blank=True, choices=[('FAC', 'Faceted'), ('POL', 'Polished'), ('BRU', 'Bruted')], max_length=3, null=True)),
                ('basic_girdle_characteristic_2', models.CharField(blank=True, choices=[('FAC', 'Faceted'), ('POL', 'Polished'), ('BRU', 'Bruted')], max_length=3, null=True)),
                ('basic_girdle_characteristic_3', models.CharField(blank=True, choices=[('FAC', 'Faceted'), ('POL', 'Polished'), ('BRU', 'Bruted')], max_length=3, null=True)),
                ('basic_girdle_characteristic_final', models.CharField(blank=True, choices=[('FAC', 'Faceted'), ('POL', 'Polished'), ('BRU', 'Bruted')], max_length=3, null=True)),
                ('basic_polish_1', models.CharField(blank=True, choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4, null=True)),
                ('basic_polish_2', models.CharField(blank=True, choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4, null=True)),
                ('basic_polish_3', models.CharField(blank=True, choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4, null=True)),
                ('basic_polish_final', models.CharField(blank=True, choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4, null=True)),
                ('basic_girdle_min_grade_final', models.CharField(blank=True, choices=[('ETN', 'Extremely Thin'), ('VTN', 'Very Thin'), ('THN', 'Thin'), ('MED', 'Medium'), ('STK', 'Slightly Thick'), ('THK', 'Thick'), ('VTK', 'Very Thick'), ('ETK', 'Extremely Thick')], max_length=10, null=True)),
                ('basic_remarks', models.TextField(blank=True, null=True)),
                ('diameter_min', models.DecimalField(decimal_places=2, max_digits=5)),
                ('diameter_max', models.DecimalField(decimal_places=2, max_digits=5)),
                ('height', models.DecimalField(decimal_places=2, max_digits=5)),
                ('table_size', models.DecimalField(decimal_places=1, max_digits=4)),
                ('crown_angle', models.DecimalField(decimal_places=2, max_digits=4)),
                ('pavilion_angle', models.DecimalField(decimal_places=2, max_digits=4)),
                ('star_length', models.DecimalField(decimal_places=1, max_digits=4)),
                ('lower_half', models.DecimalField(decimal_places=1, max_digits=4)),
                ('girdle_thickness_number', models.DecimalField(decimal_places=2, max_digits=4)),
                ('girdle_min_number', models.DecimalField(decimal_places=2, max_digits=4)),
                ('girdle_max_number', models.DecimalField(decimal_places=2, max_digits=4)),
                ('culet_size', models.DecimalField(decimal_places=2, max_digits=4)),
                ('crown_height', models.DecimalField(decimal_places=2, max_digits=4)),
                ('pavilion_depth', models.DecimalField(decimal_places=2, max_digits=4)),
                ('total_depth', models.DecimalField(decimal_places=2, max_digits=4)),
                ('table_size_rounded', models.IntegerField()),
                ('crown_angle_rounded', models.DecimalField(decimal_places=1, max_digits=4)),
                ('pavilion_angle_rounded', models.DecimalField(decimal_places=1, max_digits=4)),
                ('star_length_rounded', models.IntegerField(blank=True, null=True)),
                ('lower_half_rounded', models.IntegerField()),
                ('girdle_thickness_rounded', models.DecimalField(decimal_places=1, max_digits=4)),
                ('girdle_min_grade', models.CharField(choices=[('ETN', 'Extremely Thin'), ('VTN', 'Very Thin'), ('THN', 'Thin'), ('MED', 'Medium'), ('STK', 'Slightly Thick'), ('THK', 'Thick'), ('VTK', 'Very Thick'), ('ETK', 'Extremely Thick')], max_length=10)),
                ('girdle_max_grade', models.CharField(choices=[('ETN', 'Extremely Thin'), ('VTN', 'Very Thin'), ('THN', 'Thin'), ('MED', 'Medium'), ('STK', 'Slightly Thick'), ('THK', 'Thick'), ('VTK', 'Very Thick'), ('ETK', 'Extremely Thick')], max_length=10)),
                ('culet_size_description', models.CharField(choices=[('N/VS', 'None / Very Small'), ('N/S', 'None / Small'), ('M/N', 'Medium / None'), ('N/SL', 'None / Slightly Large'), ('L/N', 'Large / None'), ('N/VL', 'None / Very Large'), ('N/XL', 'None / Extremely Large'), ('S/VS', 'Small / Very Small'), ('M/VS', 'Medium / Very Small'), ('SL/VS', 'Slightly Large / Very Small'), ('L/VS', 'Large / Very Small'), ('VL/VS', 'Very Large / Very Small'), ('VS/XL', 'Very Small / Extremely Large'), ('M/S', 'Medium / Small'), ('S/SL', 'Small / Slightly Large'), ('L/S', 'Large / Small'), ('S/VL', 'Small / Very Large'), ('S/XL', 'Small / Extremely Large'), ('M/SL', 'Medium / Slightly Large'), ('L/M', 'Large / Medium'), ('M/VL', 'Medium / Very Large'), ('M/XL', 'Medium / Extremely Large'), ('L/SL', 'Large / Slightly Large'), ('SL/VL', 'Slightly Large / Very Large'), ('SL/XL', 'Slightly Large / Extremely Large'), ('L/VL', 'Large / Very Large'), ('L/XL', 'Large / Extremely Large'), ('VL/XL', 'Very Large / Extremely Large')], max_length=5)),
                ('crown_height_rounded', models.DecimalField(decimal_places=1, max_digits=4)),
                ('pavilion_depth_rounded', models.DecimalField(decimal_places=1, max_digits=4)),
                ('total_depth_rounded', models.DecimalField(decimal_places=1, max_digits=4)),
                ('sarine_cut_pre_polish_symmetry', models.CharField(choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4)),
                ('sarine_symmetry', models.CharField(choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4)),
                ('roundness', models.DecimalField(decimal_places=1, max_digits=4)),
                ('roundness_grade', models.CharField(choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4)),
                ('table_size_dev', models.DecimalField(decimal_places=1, max_digits=4)),
                ('table_size_dev_grade', models.CharField(choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4)),
                ('crown_angle_dev', models.DecimalField(decimal_places=1, max_digits=4)),
                ('crown_angle_dev_grade', models.CharField(choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4)),
                ('pavilion_angle_dev', models.DecimalField(decimal_places=1, max_digits=4)),
                ('pavilion_angle_dev_grade', models.CharField(choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4)),
                ('star_length_dev', models.DecimalField(decimal_places=1, max_digits=4)),
                ('star_length_dev_grade', models.CharField(choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4)),
                ('lower_half_dev', models.DecimalField(decimal_places=1, max_digits=4)),
                ('lower_half_dev_grade', models.CharField(choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4)),
                ('girdle_thick_dev', models.DecimalField(decimal_places=1, max_digits=4)),
                ('girdle_thick_dev_grade', models.CharField(choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4)),
                ('crown_height_dev', models.DecimalField(decimal_places=1, max_digits=4)),
                ('crown_height_dev_grade', models.CharField(choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4)),
                ('pavilion_depth_dev', models.DecimalField(decimal_places=1, max_digits=4)),
                ('pavilion_depth_dev_grade', models.CharField(choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4)),
                ('misalignment', models.DecimalField(decimal_places=1, max_digits=4)),
                ('misalignment_grade', models.CharField(choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4)),
                ('table_edge_var', models.DecimalField(decimal_places=1, max_digits=4)),
                ('table_edge_var_grade', models.CharField(choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4)),
                ('table_off_center', models.DecimalField(decimal_places=1, max_digits=4)),
                ('table_off_center_grade', models.CharField(choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4)),
                ('culet_off_center', models.DecimalField(decimal_places=1, max_digits=4)),
                ('culet_off_center_grade', models.CharField(choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4)),
                ('table_off_culet', models.DecimalField(decimal_places=1, max_digits=4)),
                ('table_off_culet_grade', models.CharField(choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4)),
                ('star_angle', models.DecimalField(decimal_places=1, max_digits=4)),
                ('star_angle_grade', models.CharField(choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4)),
                ('upper_half_angle', models.DecimalField(decimal_places=1, max_digits=4)),
                ('upper_half_angle_grade', models.CharField(choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4)),
                ('lower_half_angle', models.DecimalField(decimal_places=1, max_digits=4)),
                ('lower_half_angle_grade', models.CharField(choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4)),
                ('date_from_gw', models.DateTimeField(blank=True, null=True)),
                ('gw_return_reweight', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True)),
                ('gw_color', models.CharField(blank=True, choices=[('D', 'D'), ('E', 'E'), ('F', 'F'), ('G', 'G'), ('H', 'H'), ('I', 'I'), ('J', 'J')], max_length=1, null=True)),
                ('gw_clarity', models.CharField(blank=True, choices=[('IF+', 'IF+'), ('IF', 'IF'), ('IF-', 'IF-'), ('VVS1+', 'VVS1+'), ('VVS1', 'VVS1'), ('VVS1-', 'VVS1-'), ('VVS2+', 'VVS2+'), ('VVS2', 'VVS2'), ('VVS2-', 'VVS2-'), ('VS1+', 'VS1+'), ('VS1', 'VS1'), ('VS1-', 'VS1-'), ('VS2+', 'VS2+'), ('VS2', 'VS2'), ('VS2-', 'VS2-'), ('SI1+', 'SI1+'), ('SI1', 'SI1'), ('SI1-', 'SI1-'), ('SI2+', 'SI2+'), ('SI2', 'SI2'), ('SI2-', 'SI2-'), ('I1+', 'I1+'), ('I1', 'I1'), ('I1-', 'I1-')], max_length=5, null=True)),
                ('gw_fluorescence', models.CharField(blank=True, choices=[('VS', 'Very Strong'), ('S', 'Strong'), ('M', 'Medium'), ('F', 'Faint'), ('N', 'None')], max_length=5, null=True)),
                ('gw_remarks', models.TextField(blank=True, null=True)),
                ('gw_color_adjusted_1', models.CharField(blank=True, choices=[('D', 'D'), ('E', 'E'), ('F', 'F'), ('G', 'G'), ('H', 'H'), ('I', 'I'), ('J', 'J')], max_length=1, null=True)),
                ('gw_color_adjusted_2', models.CharField(blank=True, choices=[('D', 'D'), ('E', 'E'), ('F', 'F'), ('G', 'G'), ('H', 'H'), ('I', 'I'), ('J', 'J')], max_length=1, null=True)),
                ('gw_color_adjusted_3', models.CharField(blank=True, choices=[('D', 'D'), ('E', 'E'), ('F', 'F'), ('G', 'G'), ('H', 'H'), ('I', 'I'), ('J', 'J')], max_length=1, null=True)),
                ('gw_color_adjusted_final', models.CharField(blank=True, choices=[('D', 'D'), ('E', 'E'), ('F', 'F'), ('G', 'G'), ('H', 'H'), ('I', 'I'), ('J', 'J')], max_length=1, null=True)),
                ('gw_clarity_adjusted_1', models.CharField(blank=True, choices=[('IF+', 'IF+'), ('IF', 'IF'), ('IF-', 'IF-'), ('VVS1+', 'VVS1+'), ('VVS1', 'VVS1'), ('VVS1-', 'VVS1-'), ('VVS2+', 'VVS2+'), ('VVS2', 'VVS2'), ('VVS2-', 'VVS2-'), ('VS1+', 'VS1+'), ('VS1', 'VS1'), ('VS1-', 'VS1-'), ('VS2+', 'VS2+'), ('VS2', 'VS2'), ('VS2-', 'VS2-'), ('SI1+', 'SI1+'), ('SI1', 'SI1'), ('SI1-', 'SI1-'), ('SI2+', 'SI2+'), ('SI2', 'SI2'), ('SI2-', 'SI2-'), ('I1+', 'I1+'), ('I1', 'I1'), ('I1-', 'I1-')], max_length=5, null=True)),
                ('gw_clarity_adjusted_2', models.CharField(blank=True, choices=[('IF+', 'IF+'), ('IF', 'IF'), ('IF-', 'IF-'), ('VVS1+', 'VVS1+'), ('VVS1', 'VVS1'), ('VVS1-', 'VVS1-'), ('VVS2+', 'VVS2+'), ('VVS2', 'VVS2'), ('VVS2-', 'VVS2-'), ('VS1+', 'VS1+'), ('VS1', 'VS1'), ('VS1-', 'VS1-'), ('VS2+', 'VS2+'), ('VS2', 'VS2'), ('VS2-', 'VS2-'), ('SI1+', 'SI1+'), ('SI1', 'SI1'), ('SI1-', 'SI1-'), ('SI2+', 'SI2+'), ('SI2', 'SI2'), ('SI2-', 'SI2-'), ('I1+', 'I1+'), ('I1', 'I1'), ('I1-', 'I1-')], max_length=5, null=True)),
                ('gw_clarity_adjusted_3', models.CharField(blank=True, choices=[('IF+', 'IF+'), ('IF', 'IF'), ('IF-', 'IF-'), ('VVS1+', 'VVS1+'), ('VVS1', 'VVS1'), ('VVS1-', 'VVS1-'), ('VVS2+', 'VVS2+'), ('VVS2', 'VVS2'), ('VVS2-', 'VVS2-'), ('VS1+', 'VS1+'), ('VS1', 'VS1'), ('VS1-', 'VS1-'), ('VS2+', 'VS2+'), ('VS2', 'VS2'), ('VS2-', 'VS2-'), ('SI1+', 'SI1+'), ('SI1', 'SI1'), ('SI1-', 'SI1-'), ('SI2+', 'SI2+'), ('SI2', 'SI2'), ('SI2-', 'SI2-'), ('I1+', 'I1+'), ('I1', 'I1'), ('I1-', 'I1-')], max_length=5, null=True)),
                ('gw_clarity_adjusted_final', models.CharField(blank=True, choices=[('IF+', 'IF+'), ('IF', 'IF'), ('IF-', 'IF-'), ('VVS1+', 'VVS1+'), ('VVS1', 'VVS1'), ('VVS1-', 'VVS1-'), ('VVS2+', 'VVS2+'), ('VVS2', 'VVS2'), ('VVS2-', 'VVS2-'), ('VS1+', 'VS1+'), ('VS1', 'VS1'), ('VS1-', 'VS1-'), ('VS2+', 'VS2+'), ('VS2', 'VS2'), ('VS2-', 'VS2-'), ('SI1+', 'SI1+'), ('SI1', 'SI1'), ('SI1-', 'SI1-'), ('SI2+', 'SI2+'), ('SI2', 'SI2'), ('SI2-', 'SI2-'), ('I1+', 'I1+'), ('I1', 'I1'), ('I1-', 'I1-')], max_length=5, null=True)),
                ('gw_fluorescence_adjusted_1', models.CharField(blank=True, choices=[('VS', 'Very Strong'), ('S', 'Strong'), ('M', 'Medium'), ('F', 'Faint'), ('N', 'None')], max_length=4, null=True)),
                ('gw_fluorescence_adjusted_2', models.CharField(blank=True, choices=[('VS', 'Very Strong'), ('S', 'Strong'), ('M', 'Medium'), ('F', 'Faint'), ('N', 'None')], max_length=4, null=True)),
                ('gw_fluorescence_adjusted_3', models.CharField(blank=True, choices=[('VS', 'Very Strong'), ('S', 'Strong'), ('M', 'Medium'), ('F', 'Faint'), ('N', 'None')], max_length=4, null=True)),
                ('gw_fluorescence_adjusted_final', models.CharField(blank=True, choices=[('VS', 'Very Strong'), ('S', 'Strong'), ('M', 'Medium'), ('F', 'Faint'), ('N', 'None')], max_length=4, null=True)),
                ('gw_adjust_remarks', models.TextField(blank=True, null=True)),
                ('date_from_gia', models.DateTimeField(blank=True, null=True)),
                ('gia_color', models.CharField(blank=True, choices=[('D', 'D'), ('E', 'E'), ('F', 'F'), ('G', 'G'), ('H', 'H'), ('I', 'I'), ('J', 'J')], max_length=1, null=True)),
                ('post_gia_final_color', models.CharField(blank=True, choices=[('D', 'D'), ('E', 'E'), ('F', 'F'), ('G', 'G'), ('H', 'H'), ('I', 'I'), ('J', 'J')], max_length=1, null=True)),
                ('gia_material_testing', models.CharField(blank=True, max_length=20, null=True)),
                ('gia_color_adjusted_1', models.CharField(blank=True, choices=[('D', 'D'), ('E', 'E'), ('F', 'F'), ('G', 'G'), ('H', 'H'), ('I', 'I'), ('J', 'J')], max_length=1, null=True)),
                ('gia_color_adjusted_2', models.CharField(blank=True, choices=[('D', 'D'), ('E', 'E'), ('F', 'F'), ('G', 'G'), ('H', 'H'), ('I', 'I'), ('J', 'J')], max_length=1, null=True)),
                ('gia_color_adjusted_3', models.CharField(blank=True, choices=[('D', 'D'), ('E', 'E'), ('F', 'F'), ('G', 'G'), ('H', 'H'), ('I', 'I'), ('J', 'J')], max_length=1, null=True)),
                ('gia_color_adjusted_final', models.CharField(blank=True, choices=[('D', 'D'), ('E', 'E'), ('F', 'F'), ('G', 'G'), ('H', 'H'), ('I', 'I'), ('J', 'J')], max_length=1, null=True)),
                ('gia_polish_adjusted_1', models.CharField(blank=True, choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4, null=True)),
                ('gia_polish_adjusted_2', models.CharField(blank=True, choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4, null=True)),
                ('gia_polish_adjusted_3', models.CharField(blank=True, choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4, null=True)),
                ('gia_polish_adjusted_final', models.CharField(blank=True, choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4, null=True)),
                ('gia_culet_adjusted_1', models.CharField(blank=True, choices=[('N', 'None'), ('VS', 'Very Small'), ('S', 'Small'), ('M', 'Medium'), ('SL', 'Slightly Large'), ('L', 'Large'), ('VL', 'Very Large'), ('XL', 'Extremely Large')], max_length=2, null=True)),
                ('gia_culet_adjusted_2', models.CharField(blank=True, choices=[('N', 'None'), ('VS', 'Very Small'), ('S', 'Small'), ('M', 'Medium'), ('SL', 'Slightly Large'), ('L', 'Large'), ('VL', 'Very Large'), ('XL', 'Extremely Large')], max_length=2, null=True)),
                ('gia_culet_adjusted_3', models.CharField(blank=True, choices=[('N', 'None'), ('VS', 'Very Small'), ('S', 'Small'), ('M', 'Medium'), ('SL', 'Slightly Large'), ('L', 'Large'), ('VL', 'Very Large'), ('XL', 'Extremely Large')], max_length=2, null=True)),
                ('gia_culet_adjusted_final', models.CharField(blank=True, choices=[('N', 'None'), ('VS', 'Very Small'), ('S', 'Small'), ('M', 'Medium'), ('SL', 'Slightly Large'), ('L', 'Large'), ('VL', 'Very Large'), ('XL', 'Extremely Large')], max_length=2, null=True)),
                ('gia_culet_characteristic_1', models.CharField(blank=True, choices=[('N', 'None'), ('SAB', 'Slightly Abraded'), ('CH', 'Chipped')], max_length=5, null=True)),
                ('gia_culet_characteristic_2', models.CharField(blank=True, choices=[('N', 'None'), ('SAB', 'Slightly Abraded'), ('CH', 'Chipped')], max_length=5, null=True)),
                ('gia_culet_characteristic_3', models.CharField(blank=True, choices=[('N', 'None'), ('SAB', 'Slightly Abraded'), ('CH', 'Chipped')], max_length=5, null=True)),
                ('gia_culet_characteristic_final', models.CharField(blank=True, choices=[('N', 'None'), ('SAB', 'Slightly Abraded'), ('CH', 'Chipped')], max_length=5, null=True)),
                ('gia_adjust_remarks', models.TextField(blank=True, null=True)),
                ('auto_table_size_rounded_grade', models.CharField(blank=True, choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4, null=True)),
                ('auto_crown_angle_rounded_grade_grade', models.CharField(blank=True, choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4, null=True)),
                ('auto_pavilion_angle_rounded_grade', models.CharField(blank=True, choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4, null=True)),
                ('auto_star_length_rounded_grade', models.CharField(blank=True, choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4, null=True)),
                ('auto_lower_half_rounded_grade', models.CharField(blank=True, choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4, null=True)),
                ('auto_girdle_thick_rounded_grade', models.CharField(blank=True, choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4, null=True)),
                ('auto_girdle_grade', models.CharField(blank=True, choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4, null=True)),
                ('auto_crown_height_rounded_grade', models.CharField(blank=True, choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4, null=True)),
                ('auto_total_depth_rounded_grade', models.CharField(blank=True, choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4, null=True)),
                ('auto_individual_cut_grade_grade', models.CharField(blank=True, choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4, null=True)),
                ('auto_est_table_cut_grade_grade', models.CharField(blank=True, choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4, null=True)),
                ('auto_gradia_cut_grade_grade', models.CharField(blank=True, choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4, null=True)),
                ('auto_final_sarine_cut_grade', models.CharField(blank=True, choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4, null=True)),
                ('auto_final_gradia_cut_grade', models.CharField(blank=True, choices=[('EX', 'Excellent'), ('VG', 'Very Good'), ('GD', 'Good'), ('F', 'Fair'), ('P', 'Poor')], max_length=4, null=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('internal_id', models.IntegerField(unique=True)),
                ('external_id', models.CharField(blank=True, max_length=11, null=True, unique=True)),
                ('basic_grader_1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='basic_grader_1', to=settings.AUTH_USER_MODEL)),
                ('basic_grader_2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='basic_grader_2', to=settings.AUTH_USER_MODEL)),
                ('basic_grader_3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='basic_grader_3', to=settings.AUTH_USER_MODEL)),
                ('basic_inclusions_1', models.ManyToManyField(blank=True, related_name='basic_inclusions_1', to='stonegrading.Inclusion')),
                ('basic_inclusions_2', models.ManyToManyField(blank=True, related_name='basic_inclusions_2', to='stonegrading.Inclusion')),
                ('basic_inclusions_3', models.ManyToManyField(blank=True, related_name='basic_inclusions_3', to='stonegrading.Inclusion')),
                ('basic_inclusions_final', models.ManyToManyField(blank=True, related_name='basic_inclusions_final', to='stonegrading.Inclusion')),
                ('data_entry_user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='entered_data_for_stone', to=settings.AUTH_USER_MODEL)),
                ('gia_adjust_grader_1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='gia_adjust_grader_1', to=settings.AUTH_USER_MODEL)),
                ('gia_adjust_grader_2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='gia_adjust_grader_2', to=settings.AUTH_USER_MODEL)),
                ('gia_adjust_grader_3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='gia_adjust_grader_3', to=settings.AUTH_USER_MODEL)),
                ('gia_verification', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='grading.giaverification')),
                ('gw_adjust_grader_1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='gw_adjust_grader_1', to=settings.AUTH_USER_MODEL)),
                ('gw_adjust_grader_2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='gw_adjust_grader_2', to=settings.AUTH_USER_MODEL)),
                ('gw_adjust_grader_3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='gw_adjust_grader_3', to=settings.AUTH_USER_MODEL)),
                ('gw_verification', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='grading.goldwayverification')),
                ('split_from', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='grading.split')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='parcel',
            name='split_from',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='grading.split'),
        ),
    ]
